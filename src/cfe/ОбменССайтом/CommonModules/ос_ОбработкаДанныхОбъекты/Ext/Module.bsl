
Процедура ОбработатьСостояниеОтправки(СтрИ, НастройкаОбмена, ДатаОкончания, ТипДанныхДляОбмена) Экспорт
	
	Если СтрИ.СостояниеОтправки.УспешноОтправлено Тогда
		
		//--Добавление
		Если СтрИ.Идентификатор = 0 И НЕ СтрИ.ПометкаУдаления Тогда
			
			Если СтрИ.СостояниеОтправки.Идентификатор > 0 Тогда
				
				СтрИ.Идентификатор = СтрИ.СостояниеОтправки.Идентификатор;
				
				ЗаписатьИдентификаторОбъекта(НастройкаОбмена, ТипДанныхДляОбмена, СтрИ.Ссылка, СтрИ.Идентификатор);  
				ЗаписатьОтправленныеДанные(НастройкаОбмена, СтрИ.Ссылка, СтрИ.СтрокаДанные);
				
			КонецЕсли;
			
			//--Обновление
		ИначеЕсли СтрИ.Идентификатор > 0 И НЕ СтрИ.ПометкаУдаления Тогда			
			
			ЗаписатьОтправленныеДанные(НастройкаОбмена, СтрИ.Ссылка, СтрИ.СтрокаДанные);	
			
			//-- Удаление	
		ИначеЕсли СтрИ.ПометкаУдаления Тогда 
			УдалитьИдентификаторОбъекта(НастройкаОбмена, ТипДанныхДляОбмена, СтрИ.Ссылка, СтрИ.Идентификатор);
			УдалитьОтправленныеДанные(НастройкаОбмена, СтрИ.Ссылка);	
		КонецЕсли;
		
		УдалитьИзмененияОбъекта(НастройкаОбмена, СтрИ.Ссылка, ДатаОкончания);
		
		//-- Если обновляем и элемента нет на сайте, то локально удаляем его идентификатор, добавление будет при следующем цикле обмена.
	ИначеЕсли СтрИ.Идентификатор > 0
		И НЕ СтрИ.СостояниеОтправки.Ошибка
		И НЕ СтрИ.СостояниеОтправки.Найдено Тогда			
		
		УдалитьИдентификаторОбъекта(НастройкаОбмена, ТипДанныхДляОбмена, СтрИ.Ссылка, СтрИ.Идентификатор);
		СтрИ.Идентификатор = 0;
		
	КонецЕсли;
	
	Если СтрИ.СостояниеОтправки.УспешноОтправлено Тогда
		
	КонецЕсли;
	
КонецПроцедуры

//--

Функция ПолучитьТипОбъекта(Объект)
	
	Тип = Перечисления.ос_ТипыДанныхДляОбмена.ПустаяСсылка();
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Партнеры") Тогда
		Тип = Перечисления.ос_ТипыДанныхДляОбмена.Партнер;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		Тип = Перечисления.ос_ТипыДанныхДляОбмена.ЗаказКлиента;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если Объект.ЭтоГруппа Тогда
			Тип = Перечисления.ос_ТипыДанныхДляОбмена.ГруппаНоменклатуры;
		Иначе
			Тип = Перечисления.ос_ТипыДанныхДляОбмена.Номенклатура;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ХарактеристикаНоменклатуры") Тогда
		Тип = Перечисления.ос_ТипыДанныхДляОбмена.ХарактеристикаНоменклатуры;
		
	КонецЕсли;
	
	Возврат Тип;
	
КонецФункции

//--

Функция ПолучитьИдентификаторИзТЗ(ТЗИдентификаторы, Объект) Экспорт
	
	Идентификатор = 0;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Объект", Объект);
	нСтроки = ТЗИдентификаторы.НайтиСтроки(ПараметрыОтбора);
	
	Если нСтроки.Количество() > 0 Тогда
		
		Идентификатор = нСтроки[0].Идентификатор;
		
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

Функция ПолучитьТЗИдентификаторовОбъектов(НастройкаОбмена, МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ос_ИдентификаторыОбъектов.Объект КАК Объект,
	|	ос_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.ос_ИдентификаторыОбъектов КАК ос_ИдентификаторыОбъектов
	|ГДЕ
	|	ос_ИдентификаторыОбъектов.НастройкаОбмена = &НастройкаОбмена
	|	И ос_ИдентификаторыОбъектов.Объект В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗ = РезультатЗапроса.Выгрузить();
	ТЗ.Индексы.Добавить("Объект");
	
	Возврат ТЗ; 
	
КонецФункции

Функция ПолучитьОбъектПоИД(НастройкаОбмена, ТипДанных, Идентификатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ос_ИдентификаторыОбъектов.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.ос_ИдентификаторыОбъектов КАК ос_ИдентификаторыОбъектов
	|ГДЕ
	|	ос_ИдентификаторыОбъектов.ТипДанных = &ТипДанных
	|	И ос_ИдентификаторыОбъектов.Идентификатор = &Идентификатор
	|	И ос_ИдентификаторыОбъектов.НастройкаОбмена = &НастройкаОбмена";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("ТипДанных", ТипДанных);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Объект;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаписатьИдентификаторОбъекта(НастройкаОбмена, ТипДанных, Объект, Идентификатор) Экспорт
	
	Если Идентификатор = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МЗ = РегистрыСведений.ос_ИдентификаторыОбъектов.СоздатьМенеджерЗаписи();
	МЗ.НастройкаОбмена = НастройкаОбмена;
	МЗ.ТипДанных = ТипДанных;
	МЗ.Объект = Объект;
	МЗ.Идентификатор = Идентификатор;
	МЗ.Записать(Истина);
	
КонецПроцедуры

Процедура УдалитьИдентификаторОбъекта(НастройкаОбмена, ТипДанных, Объект, Идентификатор) Экспорт
	
	МЗ = РегистрыСведений.ос_ИдентификаторыОбъектов.СоздатьМенеджерЗаписи();
	МЗ.НастройкаОбмена = НастройкаОбмена;
	МЗ.ТипДанных = ТипДанных;
	МЗ.Объект = Объект;
	МЗ.Идентификатор = Идентификатор;
	МЗ.Удалить();
	
КонецПроцедуры

//--

Функция ПолучитьМассивИзмененныхОбъектов(НастройкаОбмена, Тип, ДатаОкончания) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ос_ИсторияИзменений.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.ос_ИсторияИзменений КАК ос_ИсторияИзменений
	|ГДЕ
	|	ос_ИсторияИзменений.Дата <= &ДатаОкончания
	|	И ос_ИсторияИзменений.Настройка = &НастройкаОбмена
	|	И ос_ИсторияИзменений.Тип = &Тип
	|
	|СГРУППИРОВАТЬ ПО
	|	ос_ИсторияИзменений.Объект";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.УстановитьПараметр("Тип", Тип);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Объект");
	
КонецФункции

Процедура ДобавитьИзмененияОбъекта(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Объект.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Справочники.ос_НастройкиОбменаССайтами.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДобавитьИзмененияОбъектаПоНастройке(Выборка.Ссылка, Объект.Ссылка);	
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьИзмененияОбъектаПоНастройке(НастройкаОбмена, Объект) Экспорт
	
	Тип = ПолучитьТипОбъекта(Объект);
	
	Если НЕ ЗначениеЗаполнено(Тип) Тогда
		Возврат;
	КонецЕсли;
	
	Запись = РегистрыСведений.ос_ИсторияИзменений.СоздатьМенеджерЗаписи();
	Запись.НастройкаОбмена = НастройкаОбмена;
	Запись.Дата = ТекущаяДата();
	Запись.Тип = Тип;
	Запись.Объект = Объект;
	Запись.Записать(Истина);	
	
КонецПроцедуры

Процедура УдалитьИзмененияОбъекта(НастройкаОбмена, Объект, ДатаОкончания) Экспорт
	
	Если ДатаОкончания = Дата(1,1,1) 
		ИЛИ ДатаОкончания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ос_ИсторияИзменений.Настройка КАК Настройка,
	|	ос_ИсторияИзменений.Дата КАК Дата,
	|	ос_ИсторияИзменений.Тип КАК Тип,
	|	ос_ИсторияИзменений.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.ос_ИсторияИзменений КАК ос_ИсторияИзменений
	|ГДЕ
	|	ос_ИсторияИзменений.НастройкаОбмена = &НастройкаОбмена
	|	И ос_ИсторияИзменений.Объект = &Объект
	|	И ос_ИсторияИзменений.Дата < &ДатаОкончания";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Запись = РегистрыСведений.ос_ИсторияИзменений.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка); 
		Запись.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

//--

Функция ПолучитьТЗХешейОтправленныхДанных(НастройкаОбмена, МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ос_ОтправленныеДанные.Объект КАК Объект,
	|	ос_ОтправленныеДанные.СтрокаДанныеХэш КАК СтрокаДанныеХэш
	|ИЗ
	|	РегистрСведений.ос_ОтправленныеДанные КАК ос_ОтправленныеДанные
	|ГДЕ
	|	ос_ОтправленныеДанные.НастройкаОбмена = &НастройкаОбмена
	|	И ос_ОтправленныеДанные.Объект В (&МассивОбъектов)";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗ = РезультатЗапроса.Выгрузить();
	ТЗ.Индексы.Добавить("Объект");
	
	Возврат ТЗ;
	
КонецФункции

Функция ЗаписатьОтправленныеДанные(НастройкаОбмена, Объект, СтрокаДанные) Экспорт
	
	МЗ = РегистрыСведений.ос_ОтправленныеДанные.СоздатьМенеджерЗаписи();
	МЗ.Дата = ТекущаяДата();
	МЗ.НастройкаОбмена = НастройкаОбмена;
	МЗ.Объект = Объект;
	МЗ.СтрокаДанныеХэш = ПолучитьХэшMD5(СтрокаДанные);
	МЗ.Записать(Истина);
	
КонецФункции

Функция УдалитьОтправленныеДанные(НастройкаОбмена, Объект) Экспорт
	
	МЗ = РегистрыСведений.ос_ОтправленныеДанные.СоздатьМенеджерЗаписи();
	МЗ.НастройкаОбмена = НастройкаОбмена;
	МЗ.Объект = Объект;
	МЗ.Удалить();
	
КонецФункции

Функция ПроверитьХэшОтправленныхДанныхПоТЗ(ТЗ, Объект, СтрокаДанные) Экспорт
	
	ЕстьИзменения = Истина;
	
	СтрокаДанныеХэш = ПолучитьХэшMD5(СтрокаДанные);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Объект", Объект);
	
	нСтроки = ТЗ.НайтиСтроки(ПараметрыОтбора);
	
	Если нСтроки.Количество() > 0 
		И нСтроки[0].СтрокаДанныеХэш = СтрокаДанныеХэш Тогда
		
		ЕстьИзменения = Ложь;
		
	КонецЕсли;
	
	Возврат ЕстьИзменения;
	
КонецФункции

Функция ПолучитьХэшMD5(СтрокаДанные)
	
	Хеш = Новый ХешированиеДанных(ХешФункция.MD5);
	Хеш.Добавить(СтрокаДанные);
	
	Возврат Строка(Хеш.ХешСумма); 
	
КонецФункции
